// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    status        UserStatus @default(NEW)
    agent         Agent?
}

enum UserStatus {
    NEW
    ACTIVE
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Declaration {
    id           String             @id @default(cuid())
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    priceMin     Float?
    priceMax     Float?
    checkinDate  DateTime?
    checkoutDate DateTime?
    roomsMin     Int?
    roomsMax     Int?
    commission   Float
    agent        Agent              @relation(fields: [agentId], references: [id])
    agentId      String
    district     LocationDistrict[]
    city         LocationCity[]
    region       LocationRegion[]
    propertyType PropertyType[]
    complex      Complex[]

    @@index([agentId])
}

model PropertyType {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    declaration Declaration[]
    tracking    Tracking[]
}

model Agent {
    id                 String                @id @default(cuid())
    createdAt          DateTime              @default(now())
    updatedAt          DateTime              @updatedAt
    user               User                  @relation(fields: [userId], references: [id])
    userId             String                @unique
    firstName          String
    lastName           String
    legalAddress       LegalAddress          @relation(fields: [legalAddressId], references: [id])
    legalAddressId     String
    contactInfo        ContactInfo?          @relation(fields: [contactInfoId], references: [id])
    contactInfoId      String?               @unique
    notificationInfo   NotificationInfo?     @relation(fields: [notificationInfoId], references: [id])
    notificationInfoId String?               @unique
    type               AgentType
    agencyInfo         AgencyInfo?           @relation(fields: [agencyInfoId], references: [id])
    agencyInfoId       String?
    statusedAgents     AgentPersonalStatus[] @relation("Initiator")
    personalStatus     AgentPersonalStatus[] @relation("Effector")
    declaration        Declaration[]
    tracking           Tracking[]

    @@index([legalAddressId])
    @@index([agencyInfoId])
}

model LegalAddress {
    id       String  @id @default(cuid())
    district String
    city     String
    region   String
    agent    Agent[]

    @@unique([district, city, region])
}

model NotificationInfo {
    id         String  @id @default(cuid())
    telegramId String?
    agent      Agent?
}

model NotificationVerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ContactInfo {
    id           String  @id @default(cuid())
    telegramLink String?
    whatsappLink String?
    viberLink    String?
    lineLink     String?
    agent        Agent?
}

enum AgentType {
    PERSONAL
    AGENCY
}

model AgencyInfo {
    id         String  @id @default(cuid())
    agencyName String  @unique
    agent      Agent[]
}

model AgentPersonalStatus {
    status      AgentPersonalStatusType @default(NONE)
    initiator   Agent                   @relation("Initiator", fields: [initiatorId], references: [id])
    effector    Agent                   @relation("Effector", fields: [effectorId], references: [id])
    initiatorId String
    effectorId  String

    @@id([initiatorId, effectorId])
    @@index([initiatorId])
    @@index([effectorId])
}

enum AgentPersonalStatusType {
    FAVOURITE
    BLOCKED
    NONE
}

model Tracking {
    id             String            @id @default(cuid())
    createdAt      DateTime          @default(now())
    updatedAt      DateTime          @updatedAt
    priceMin       Float?
    priceMax       Float?
    roomsMin       Int?
    roomsMax       Int?
    commission     Float?
    agent          Agent             @relation(fields: [agentId], references: [id])
    agentId        String
    district       LocationDistrict? @relation(fields: [districtId], references: [id])
    districtId     String?
    city           LocationCity?     @relation(fields: [cityId], references: [id])
    cityId         String?
    region         LocationRegion?   @relation(fields: [regionId], references: [id])
    regionId       String?
    propertyType   PropertyType?     @relation(fields: [propertyTypeId], references: [id])
    propertyTypeId String?
    complex        Complex?          @relation(fields: [complexId], references: [id])
    complexId      String?

    @@index([agentId])
    @@index([districtId])
    @@index([cityId])
    @@index([regionId])
    @@index([propertyTypeId])
    @@index([complexId])
}

// Dictionaries

model Complex {
    id          String        @id @default(cuid())
    name        String
    type        ComplexType[]
    declaration Declaration[]
    tracking    Tracking[]
}

model ComplexType {
    id      String    @id @default(cuid())
    type    String    @unique
    complex Complex[]
}

model LocationDistrict {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    declaration Declaration[]
    tracking    Tracking[]
}

model LocationCity {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    declaration Declaration[]
    tracking    Tracking[]
}

model LocationRegion {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    declaration Declaration[]
    tracking    Tracking[]
}

model LegalAddressDistrictDict {
    id   String @id @default(cuid())
    name String @unique
    slug String @unique
}

model LegalAddressCityDict {
    id   String @id @default(cuid())
    name String @unique
    slug String @unique
}

model LegalAddressRegionDict {
    id   String @id @default(cuid())
    name String @unique
    slug String @unique
}

model CommissionRateDict {
    id    String @id @default(cuid())
    value Float  @unique
}
