// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Declaration {
    id           String       @id @default(cuid())
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    location     Location     @relation(fields: [locationId], references: [id])
    locationId   String
    propertyType PropertyType
    priceMin     Decimal?
    priceMax     Decimal?
    checkinDate  DateTime?
    checkoutDate DateTime?
    roomsMin     Int?
    roomsMax     Int?
    commission   Float

    @@index([locationId])
}

model Location {
    id          String        @id @default(cuid())
    district    String
    city        String
    region      String
    Declaration Declaration[]

    @@unique([district, city, region])
}

enum PropertyType {
    VILLA
    APARTMENT
    TOWNHOUSE
}

model Agent {
    id             String                @id @default(cuid())
    firstName      String
    lastName       String
    legalAddress   LegalAddress          @relation(fields: [legalAddressId], references: [id])
    legalAddressId String
    contactInfo    ContactInfo           @relation(fields: [contactInfoId], references: [id])
    contactInfoId  String                @unique
    type           AgentType
    agencyInfo     AgencyInfo?           @relation(fields: [agencyInfoId], references: [id])
    agencyInfoId   String
    statusedAgents AgentPersonalStatus[] @relation("Initiator")
    personalStatus AgentPersonalStatus[] @relation("Effector")

    @@index([legalAddressId])
    @@index([agencyInfoId])
}

model LegalAddress {
    id       String  @id @default(cuid())
    district String
    city     String
    region   String
    Agent    Agent[]

    @@unique([district, city, region])
}

model ContactInfo {
    id           String @id @default(cuid())
    telegramLink String
    whatsappLink String
    viberLink    String
    Agent        Agent?
}

enum AgentType {
    PERSONAL
    AGENCY
}

model AgencyInfo {
    id         String  @id @default(cuid())
    agencyName String  @unique
    Agent      Agent[]
}

model AgentPersonalStatus {
    id          String                  @id @default(cuid())
    status      AgentPersonalStatusType @default(NONE)
    initiator   Agent                   @relation("Initiator", fields: [initiatorId], references: [id])
    effector    Agent                   @relation("Effector", fields: [effectorId], references: [id])
    initiatorId String
    effectorId  String

    @@index([initiatorId])
    @@index([effectorId])
}

enum AgentPersonalStatusType {
    FAVOURITE
    BLOCKED
    NONE
}

// Dictionaries

model LocationDistrictDict {
    id   String @id @default(cuid())
    name String @unique
}

model LocationCityDict {
    id   String @id @default(cuid())
    name String @unique
}

model LocationRegionDict {
    id   String @id @default(cuid())
    name String @unique
}

model LegalAddressDistrictDict {
    id   String @id @default(cuid())
    name String @unique
}

model LegalAddressCityDict {
    id   String @id @default(cuid())
    name String @unique
}

model LegalAddressRegionDict {
    id   String @id @default(cuid())
    name String @unique
}

model CommissionRateDict {
    id    String @id @default(cuid())
    value Float  @unique
}
